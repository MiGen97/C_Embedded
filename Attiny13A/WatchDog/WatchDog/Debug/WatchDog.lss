
WatchDog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042f  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ad  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000234  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029d  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c3  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	41 c0       	rjmp	.+130    	; 0xa2 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
//#define SM0		(1<<3)
int main(void)
{
	int counter=0;	
	//Enable watchdog timer interrupt
	SREG|=IBIT;		//set the IBIT from the Status Registers to 1 to enable the interrupts
  22:	8f b7       	in	r24, 0x3f	; 63
  24:	80 68       	ori	r24, 0x80	; 128
  26:	8f bf       	out	0x3f, r24	; 63
	WDTCR|=WDTIE;	//set the watchdog timer interrupt enable bit to 1
  28:	81 b5       	in	r24, 0x21	; 33
  2a:	86 60       	ori	r24, 0x06	; 6
  2c:	81 bd       	out	0x21, r24	; 33
	WDTCR&=~WDE;	//clear the WDE bit to make WatchDog to enter in Interrupt mode
  2e:	81 b5       	in	r24, 0x21	; 33
  30:	8c 7f       	andi	r24, 0xFC	; 252
  32:	81 bd       	out	0x21, r24	; 33
	//set the watchdog timeout at 8 seconds
	WDTCR|=WDP3;
  34:	81 b5       	in	r24, 0x21	; 33
  36:	85 60       	ori	r24, 0x05	; 5
  38:	81 bd       	out	0x21, r24	; 33
	WDTCR&=~WDP2;
  3a:	81 b5       	in	r24, 0x21	; 33
  3c:	8d 7f       	andi	r24, 0xFD	; 253
  3e:	81 bd       	out	0x21, r24	; 33
	WDTCR&=~WDP1;
  40:	81 b5       	in	r24, 0x21	; 33
  42:	8e 7f       	andi	r24, 0xFE	; 254
  44:	81 bd       	out	0x21, r24	; 33
	WDTCR|=WDP0;
  46:	81 b5       	in	r24, 0x21	; 33
  48:	81 bd       	out	0x21, r24	; 33
	
	//set the pin4 as Output
	DDRB|=PB4;
  4a:	ba 9a       	sbi	0x17, 2	; 23
	PORTB|=PB4;
  4c:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	2f e7       	ldi	r18, 0x7F	; 127
  50:	3a e1       	ldi	r19, 0x1A	; 26
  52:	46 e0       	ldi	r20, 0x06	; 6
  54:	21 50       	subi	r18, 0x01	; 1
  56:	30 40       	sbci	r19, 0x00	; 0
  58:	40 40       	sbci	r20, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <__SREG__+0x15>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__SREG__+0x1f>
  5e:	00 00       	nop
	_delay_ms(2000);
	PORTB&=~PB4;
  60:	c2 98       	cbi	0x18, 2	; 24
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <__SREG__+0x2b>
  68:	01 96       	adiw	r24, 0x01	; 1
    /* Replace with your application code */
    while (1) 
    {
		if(counter%2){
  6a:	9c 01       	movw	r18, r24
  6c:	21 50       	subi	r18, 0x01	; 1
  6e:	31 09       	sbc	r19, r1
  70:	20 ff       	sbrs	r18, 0
  72:	0c c0       	rjmp	.+24     	; 0x8c <__SREG__+0x4d>
			
			//turn on the LED connected to pin4
			PORTB|=PB4;
  74:	c2 9a       	sbi	0x18, 2	; 24
			
			//Set Sleep Enable bit to "TRUE"
			MCUCR|=SE;
  76:	25 b7       	in	r18, 0x35	; 53
  78:	25 60       	ori	r18, 0x05	; 5
  7a:	25 bf       	out	0x35, r18	; 53
			
			//Set the sleep mode to "Power-Down" with the two Sleep Mode Select Bits
			MCUCR|=SM1;	
  7c:	25 b7       	in	r18, 0x35	; 53
  7e:	24 60       	ori	r18, 0x04	; 4
  80:	25 bf       	out	0x35, r18	; 53
			MCUCR&=~SM0;
  82:	25 b7       	in	r18, 0x35	; 53
  84:	2c 7f       	andi	r18, 0xFC	; 252
  86:	25 bf       	out	0x35, r18	; 53
			
			//increment the counter an make it at the next loop to go on the other branch of the IF statement
			counter+=1;
			asm("sleep");
  88:	88 95       	sleep
  8a:	ee cf       	rjmp	.-36     	; 0x68 <__SREG__+0x29>
		}else{
			
			//turn off the LED connected to pin4
			PORTB&=~PB4;
  8c:	c2 98       	cbi	0x18, 2	; 24
  8e:	2f e7       	ldi	r18, 0x7F	; 127
  90:	3a e1       	ldi	r19, 0x1A	; 26
  92:	46 e0       	ldi	r20, 0x06	; 6
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <__SREG__+0x55>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__SREG__+0x5f>
  9e:	00 00       	nop
  a0:	e3 cf       	rjmp	.-58     	; 0x68 <__SREG__+0x29>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
