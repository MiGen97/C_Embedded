
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000415  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039e  00000000  00000000  00000561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f0  00000000  00000000  000008ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000299  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	23 c0       	rjmp	.+70     	; 0x66 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:


int main(void)
{
	// initialize pin 4 (ATtiny leg 3) as an output.
	DDRB_T |= PB4_T;    //configure PB4 as output
  22:	87 b3       	in	r24, 0x17	; 23
  24:	98 b3       	in	r25, 0x18	; 24
  26:	80 61       	ori	r24, 0x10	; 16
  28:	98 bb       	out	0x18, r25	; 24
  2a:	87 bb       	out	0x17, r24	; 23
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB_T |= PB4_T;   //drive the PB4 to HIGH
  2c:	88 b3       	in	r24, 0x18	; 24
  2e:	99 b3       	in	r25, 0x19	; 25
  30:	80 61       	ori	r24, 0x10	; 16
  32:	99 bb       	out	0x19, r25	; 25
  34:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  36:	2f e3       	ldi	r18, 0x3F	; 63
  38:	8d e0       	ldi	r24, 0x0D	; 13
  3a:	93 e0       	ldi	r25, 0x03	; 3
  3c:	21 50       	subi	r18, 0x01	; 1
  3e:	80 40       	sbci	r24, 0x00	; 0
  40:	90 40       	sbci	r25, 0x00	; 0
  42:	e1 f7       	brne	.-8      	; 0x3c <main+0x1a>
  44:	00 c0       	rjmp	.+0      	; 0x46 <__SREG__+0x7>
  46:	00 00       	nop
		_delay_ms(1000);             // wait for a second
		PORTB_T &= ~(PB4_T);    // turn the LED off by making the voltage LOW
  48:	88 b3       	in	r24, 0x18	; 24
  4a:	99 b3       	in	r25, 0x19	; 25
  4c:	8f 7e       	andi	r24, 0xEF	; 239
  4e:	99 bb       	out	0x19, r25	; 25
  50:	88 bb       	out	0x18, r24	; 24
  52:	2f e3       	ldi	r18, 0x3F	; 63
  54:	8d e0       	ldi	r24, 0x0D	; 13
  56:	93 e0       	ldi	r25, 0x03	; 3
  58:	21 50       	subi	r18, 0x01	; 1
  5a:	80 40       	sbci	r24, 0x00	; 0
  5c:	90 40       	sbci	r25, 0x00	; 0
  5e:	e1 f7       	brne	.-8      	; 0x58 <__SREG__+0x19>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
  64:	e3 cf       	rjmp	.-58     	; 0x2c <main+0xa>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
