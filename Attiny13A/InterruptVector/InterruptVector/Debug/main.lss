
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000037a  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000324  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a8  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000263  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0d c0       	rjmp	.+26     	; 0x22 <__vector_3>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	14 d0       	rcall	.+40     	; 0x46 <main>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <__vector_3>:
//}


void __vector_3 (void) __attribute__ ((signal, used));

void __vector_3 (void)  {
  22:	1f 92       	push	r1
  24:	0f 92       	push	r0
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	0f 92       	push	r0
  2a:	11 24       	eor	r1, r1
  2c:	8f 93       	push	r24
  2e:	9f 93       	push	r25
	PORTB ^= (1u<<4u);
  30:	98 b3       	in	r25, 0x18	; 24
  32:	80 e1       	ldi	r24, 0x10	; 16
  34:	89 27       	eor	r24, r25
  36:	88 bb       	out	0x18, r24	; 24
}
  38:	9f 91       	pop	r25
  3a:	8f 91       	pop	r24
  3c:	0f 90       	pop	r0
  3e:	0f be       	out	0x3f, r0	; 63
  40:	0f 90       	pop	r0
  42:	1f 90       	pop	r1
  44:	18 95       	reti

00000046 <main>:

int main(void)
{
	//cli(); //set bit 7(I) in SREG to 0 (disable global interrupts)
	SREG &= ~(1u<<7u);
  46:	8f b7       	in	r24, 0x3f	; 63
  48:	8f 77       	andi	r24, 0x7F	; 127
  4a:	8f bf       	out	0x3f, r24	; 63
	
	//Configure pin PB4 and PB3 as output
	DDRB |= (1u<<4u);		//set the PB4 pin as output
  4c:	bc 9a       	sbi	0x17, 4	; 23
	PORTB &= ~(1u<<4u);	//set the PB4 pin to LOW
  4e:	c4 98       	cbi	0x18, 4	; 24
	

	//Enable the Timer/Counter with prescaler
	//Prescaler
		//keep the prescaler in reset until the needed modifications are made
		GTCCR |= (1u<<7u);
  50:	88 b5       	in	r24, 0x28	; 40
  52:	80 68       	ori	r24, 0x80	; 128
  54:	88 bd       	out	0x28, r24	; 40
	
		//Select the clock source at clkI/O divided by 1024 from prescaler
		TCCR0B |= (1u<<2u)|(1u);			//set CS0 bits to one
  56:	83 b7       	in	r24, 0x33	; 51
  58:	85 60       	ori	r24, 0x05	; 5
  5a:	83 bf       	out	0x33, r24	; 51
		
		//stop the prescaler reset
		GTCCR &= ~(1u<<7u);
  5c:	88 b5       	in	r24, 0x28	; 40
  5e:	8f 77       	andi	r24, 0x7F	; 127
  60:	88 bd       	out	0x28, r24	; 40
		
	//Enable the timer overflow interrupt
	//Timer
		TIMSK0 |= (1u<<1u);			//set TOIE0 to one
  62:	89 b7       	in	r24, 0x39	; 57
  64:	82 60       	ori	r24, 0x02	; 2
  66:	89 bf       	out	0x39, r24	; 57
	
	
	//sei(); //set bit 7(I) in SREG to 1 (enable global interrupts)
	SREG |= 1u<<7u;
  68:	8f b7       	in	r24, 0x3f	; 63
  6a:	80 68       	ori	r24, 0x80	; 128
  6c:	8f bf       	out	0x3f, r24	; 63
  6e:	ff cf       	rjmp	.-2      	; 0x6e <main+0x28>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
